{
  parserClass="org.onj.language.OnjParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Onj"
  psiImplClassSuffix="Impl"
  psiPackage="org.onj.language.psi"
  psiImplPackage="org.onj.language.psi.impl"

  elementTypeHolderClass="org.onj.language.psi.OnjTypes"
  elementTypeClass="org.onj.language.psi.OnjElementType"
  tokenTypeClass="org.onj.language.psi.OnjTokenType"
  psiImplUtilClass="org.onj.language.psi.impl.OnjPsiImplUtils"

}


OnjFile ::= ((objectEntry COMMA) | topLevelStructure)* objectEntry? topLevelStructure?

topLevelStructure ::= importStructure | variableStructure | useStructure

importStructure ::= IMPORT (string | literalExpression) asContextDependentKeyword variableDeclarationName SEMICOLON
variableDeclarationName ::= IDENTIFIER {
  mixin="org.onj.language.psi.impl.OnjNamedElementImpl"
  implements="org.onj.language.psi.impl.OnjNamedElement"
  methods=[getName setName getNameIdentifier getPresentation]
}
variableStructure ::= VAR variableDeclarationName EQUALS expression SEMICOLON {
//  mixin="org.onj.language.psi.impl.OnjNamedElementImpl"
//  implements=["org.onj.language.psi.impl.OnjNamedElement" "org.onj.language.psi.impl.OnjDocumentableElement"]
//  methods=[getName setName getNameIdentifier getPresentation findDocumentationComment ]
}
useStructure ::= USE IDENTIFIER SEMICOLON

asContextDependentKeyword ::= "as"

keyValuePair ::= key COLON expression
key ::= (IDENTIFIER | string)
tripleDot ::= DOT DOT DOT literalExpression

objectEntry ::= tripleDot | keyValuePair
arrayEntry ::= tripleDot | expression

expression ::= infixFunctionCallExpression
infixFunctionCallExpression ::= binaryExpression (functionName infixFunctionCallExpression)?
binaryExpression ::= typeConversionExpression (binaryOperator binaryExpression)?
typeConversionExpression ::= unaryExpression (HASH functionName)*
unaryExpression ::= (MINUS unaryExpression) | variableAccessExpression
variableAccessExpression ::= literalExpression (DOT (variableAccessor | literalExpression))*
literalExpression ::=   functionCallExpression |
                        INTEGER |
                        FLOAT |
                        groupedExpression |
                        object |
                        namedObject |
                        array |
                        variableExpression |
                        string

variableExpression ::= IDENTIFIER {
  mixin="org.onj.language.psi.impl.OnjNamedElementImpl"
implements="org.onj.language.psi.impl.OnjNamedElement"
methods=[getName setName getNameIdentifier]
}
variableAccessor ::= IDENTIFIER | string
functionCallExpression ::= functionName L_PAREN (expression COMMA)* expression? R_PAREN{
// implements="org.onj.language.psi.impl.OnjNamedElement"
// methods=[getElementNameKomplex setName getNameIdentifier]
}
functionName ::= IDENTIFIER {
//  implements="org.onj.language.psi.impl.OnjNamedElement"
//  methods=[getName setName getNameIdentifier]

}
groupedExpression ::= L_PAREN expression R_PAREN

object ::= L_BRACE (objectEntry COMMA)* objectEntry? R_BRACE
namedObject ::= DOLLAR namedObjectName object{
//  implements="org.onj.language.psi.impl.OnjNamedElement"
//  methods=[getElementNameKomplex setName getNameIdentifier]
}
namedObjectName ::= IDENTIFIER {
//  implements="org.onj.language.psi.impl.OnjNamedElement"
//  methods=[getName setName getNameIdentifier]
}
array ::= L_BRACKET (arrayEntry COMMA)* arrayEntry? R_BRACKET

binaryOperator ::= PLUS | MINUS | STAR | DIV
string ::= STRING_BEGIN (STRING_ESCAPE | INVALID_STRING_ESCAPE | STRING_PART)* STRING_END

private comment_ ::= LINE_COMMENT | BLOCK_COMMENT