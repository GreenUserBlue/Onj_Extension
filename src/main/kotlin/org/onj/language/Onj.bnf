{
  parserClass="org.onj.language.OnjParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Onj"
  psiImplClassSuffix="Impl"
  psiPackage="org.onj.language.psi"
  psiImplPackage="org.onj.language.psi.impl"

  elementTypeHolderClass="org.onj.language.psi.OnjTypes"
  elementTypeClass="org.onj.language.psi.OnjElementType"
  tokenTypeClass="org.onj.language.psi.OnjTokenType"
}

//<digit> ::= 0|1|2|3|4|5|6|7|8|9
//<integer> ::= <digit> | <digit><integer>
//<float> ::= <integer> "." <integer> | "." <integer>


//OnjFile ::= item_*
//
//private item_ ::= (property|COMMENT|CRLF)
//
//property ::= (KEY? SEPARATOR VALUE?) | KEY

// (elem ( ',' elem)*) | WHITE_SPACE | BLOCK_COMMENT | COMMENT

//OnjFile ::= item_*
//
//private item_ ::= <pair> | WHITE_SPACE
//
//
//<any>   ::= "."
//<stringEsc> ::= "\\" <any>
//<MyText>::= ""
//
//namedKeys ::=  '"' *(<stringEsc> | <any>) '"' | "'" *(<any>) "'" | <MyText>
//
//
//<elem> ::= WHITE_SPACE (<array> | <object> |   elem | <pair> | <primitive>)
//
//
//<primitive> ::= <bool> | <integer> | <float> | <MyText> | "null"
//<bool> ::= "true" | "false"
//<digit> ::= 0|1|2|3|4|5|6|7|8|9
//<integer> ::= <digit> | <digit><integer>
//<float> ::= <integer> "." <integer> | "." <integer>
//<pair> ::= namedKeys SEPARATOR <elem>
//
//
//<array> ::= '[' ( <elem> ( ',' <elem>)* | ) ']'
//<object> ::= '[' ( <pair> ( ',' <pair>)* | ) ']'

//var x="darkmode"

//0x 0o 0b    hex, oct, bin√§r, nur ganzzahlig
// rechnungen bei import und ...(function()) mit klammer, sonst ohne
// use abcdefg;
// function ist teil einer Rechnung
// infix functionen sind shit
//

//abc: 3 rnd()
//import "./shit/"

OnjFile ::= (item_ | WHITE_SPACE?)


private item_ ::= (WHITE_SPACE? elem WHITE_SPACE? (((SEPARATOR item_))|(SEPARATOR?)))
private item_no_pair_ ::= (WHITE_SPACE? elem_no_pair WHITE_SPACE?)

pair ::=  WHITE_SPACE? (NAME_CHARACTER | STRING_VALUE) WHITE_SPACE? ASSIGN WHITE_SPACE? item_no_pair_

elem ::= ( primitive | pair| STRING_VALUE | array | object) WHITE_SPACE?
elem_no_pair ::= ( primitive | STRING_VALUE | array | object) WHITE_SPACE?

primitive ::= WHITE_SPACE? (bool | float | integer | "null")
bool ::= ("true"|"false")
digit ::= ("0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9")
integer ::= (digit "_"* integer|(digit))
float ::= ((integer "." integer) | ("." integer))
array ::= '['  WHITE_SPACE? ( item_no_pair_ WHITE_SPACE?  (((SEPARATOR item_no_pair_)+)|(SEPARATOR?)))?  WHITE_SPACE? ']'
object ::= '{'  WHITE_SPACE? ( pair WHITE_SPACE? (((SEPARATOR pair)+)|(SEPARATOR?)) )?  WHITE_SPACE? '}'