/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package org.onj.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.onj.language.psi.OnjTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>onj.flex</tt>
 */
public class OnjLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17184 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\21\1\26\1\60\1\61\5\21"+
    "\2\26\1\62\7\21\1\26\1\63\20\21\1\26\1\64\1\21\1\65\13\26\1\66\1\26\1\67\22"+
    "\21\1\70\5\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100"+
    "\2\21\1\101\1\102\7\21\123\26\1\103\7\26\1\104\1\105\12\26\1\106\24\21\1\26"+
    "\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\6\2\7\1\11\1\12\4\0\1\13\1\14"+
    "\1\13\2\7\1\15\3\7\1\15\71\7\1\16\1\7\1\17\1\0\1\20\1\21\2\0\16\4\1\22\1\23"+
    "\1\24\1\25\2\7\1\26\11\7\1\27\21\7\1\30\1\31\24\7\1\6\3\7\1\15\1\32\1\6\4"+
    "\7\1\0\1\33\4\4\1\34\1\35\1\0\3\7\2\11\3\0\1\4\1\36\5\7\1\37\3\4\1\40\1\41"+
    "\13\7\1\42\1\43\1\44\1\45\1\4\1\46\2\0\1\47\3\7\3\4\1\50\12\7\1\51\1\4\1\52"+
    "\1\0\1\4\1\31\3\7\1\37\1\53\1\13\2\7\1\51\1\54\1\55\1\56\2\0\3\7\1\57\10\0"+
    "\2\7\1\22\1\60\2\0\1\61\1\4\1\62\3\4\1\63\6\7\1\64\2\4\1\65\1\7\1\66\1\4\1"+
    "\6\1\7\1\67\1\70\1\71\2\7\1\72\1\73\1\74\1\43\1\75\1\76\1\77\1\66\1\4\1\17"+
    "\1\0\1\100\1\101\1\71\2\7\1\72\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1"+
    "\4\1\111\1\0\1\100\1\27\1\26\2\7\1\72\1\112\1\74\1\34\1\113\1\114\1\0\1\66"+
    "\1\4\1\0\1\32\1\100\1\70\1\71\2\7\1\72\1\112\1\74\1\43\1\105\1\110\1\77\1"+
    "\66\1\4\1\32\1\0\1\115\1\116\1\117\1\120\1\121\1\116\1\7\1\122\1\123\1\124"+
    "\1\125\1\0\1\110\1\4\2\0\1\126\1\22\1\72\2\7\1\72\1\7\1\127\1\130\1\124\1"+
    "\131\1\11\1\66\1\4\2\0\1\67\1\22\1\72\2\7\1\72\1\132\1\74\1\130\1\124\1\131"+
    "\1\24\1\66\1\4\1\133\1\0\1\100\1\22\1\72\4\7\1\134\1\130\1\135\1\136\1\137"+
    "\1\66\1\4\1\0\1\140\1\141\1\7\1\15\1\140\2\7\1\26\1\142\1\15\1\143\1\144\1"+
    "\4\1\110\1\4\1\145\1\0\1\6\5\7\1\146\1\36\1\147\1\150\1\4\1\151\4\0\1\152"+
    "\1\153\1\154\1\6\1\155\1\156\1\146\1\157\1\160\1\161\1\4\1\162\4\0\1\114\2"+
    "\0\1\151\1\4\1\151\1\163\1\164\1\7\1\6\3\7\1\20\1\33\1\4\1\130\1\165\1\4\1"+
    "\33\3\4\1\166\1\167\7\0\5\7\1\37\1\4\1\170\1\4\1\151\1\51\1\171\1\172\1\173"+
    "\1\174\1\7\1\175\1\176\1\4\1\161\4\7\1\27\1\14\5\7\1\177\51\7\1\117\1\15\1"+
    "\117\5\7\1\117\4\7\1\117\1\15\1\117\1\7\1\15\7\7\1\117\10\7\1\200\4\0\2\7"+
    "\2\0\12\7\2\60\1\6\114\7\1\70\2\7\1\6\2\7\1\11\11\7\1\201\1\41\1\114\1\7\1"+
    "\22\1\202\1\0\2\7\1\202\1\0\2\7\1\203\1\0\1\7\1\22\1\204\1\0\6\7\1\205\3\4"+
    "\1\206\1\207\1\4\1\151\3\0\1\210\1\4\1\151\13\7\1\0\1\211\4\7\1\212\10\7\1"+
    "\60\1\0\3\7\1\15\1\4\1\213\1\4\1\213\1\110\1\4\3\7\1\60\1\20\1\0\5\7\1\214"+
    "\3\7\1\17\1\4\1\151\4\0\2\7\1\147\1\213\6\7\1\165\1\150\3\4\1\43\1\4\1\151"+
    "\1\4\1\151\1\137\1\0\1\4\1\150\10\0\1\215\5\7\1\205\1\4\1\215\1\214\1\4\1"+
    "\151\1\0\1\216\1\213\1\0\1\217\3\7\1\65\1\173\1\4\1\31\4\7\1\51\1\4\1\213"+
    "\1\0\4\7\1\205\2\4\1\0\1\4\1\220\1\4\1\31\3\7\1\60\1\7\1\114\10\0\1\221\2"+
    "\4\1\222\1\223\1\151\30\7\6\4\1\161\1\216\42\7\2\60\4\7\2\60\1\7\1\224\3\7"+
    "\1\60\6\7\1\22\1\160\1\225\1\20\1\226\1\214\1\7\1\20\1\225\1\20\5\0\1\227"+
    "\1\0\1\76\1\230\1\0\1\231\3\0\1\32\1\137\2\0\1\7\1\20\6\0\4\4\1\230\1\0\1"+
    "\232\1\140\1\142\1\233\1\21\1\234\1\7\1\235\1\236\1\237\2\0\4\4\1\240\1\230"+
    "\144\0\1\110\6\4\1\151\42\0\5\7\1\15\5\7\1\15\20\7\1\20\1\241\1\242\1\0\4"+
    "\7\1\27\1\14\7\7\1\137\1\0\1\76\2\7\1\15\1\0\10\15\4\4\5\0\1\137\72\0\1\243"+
    "\3\0\1\33\1\4\1\233\1\244\1\6\11\7\1\15\1\245\1\6\12\7\1\177\1\236\4\7\1\60"+
    "\1\6\12\7\1\15\2\0\3\7\1\11\6\0\170\7\1\60\11\0\72\7\1\60\5\0\21\7\1\20\10"+
    "\0\5\7\1\60\41\7\1\20\2\7\1\4\1\242\2\0\5\7\1\147\1\221\1\246\3\7\1\51\10"+
    "\7\1\51\1\4\1\151\3\0\1\137\1\7\1\140\14\7\1\71\3\7\1\15\1\7\7\0\1\137\1\7"+
    "\1\247\1\250\2\7\1\37\3\0\6\7\1\214\1\0\1\31\5\7\1\205\1\4\1\161\1\0\1\4\1"+
    "\151\2\4\1\31\1\251\1\4\1\31\2\7\1\51\1\161\2\7\1\147\1\4\1\213\1\0\3\7\1"+
    "\20\1\63\5\7\1\37\1\4\1\230\1\137\1\4\1\151\1\252\1\7\1\4\1\253\5\7\1\65\1"+
    "\150\1\0\1\250\1\254\1\4\1\151\2\7\1\15\1\255\6\7\1\172\1\256\1\212\2\0\1"+
    "\257\1\7\1\37\1\260\1\0\3\261\1\0\2\15\5\7\1\177\1\60\1\0\16\7\1\37\1\262"+
    "\1\4\1\151\64\7\1\214\1\0\2\7\1\15\1\263\5\7\1\214\40\0\55\7\1\60\15\7\1\17"+
    "\4\0\1\15\1\0\1\263\1\264\1\7\1\72\1\15\1\160\1\265\15\7\1\17\3\0\1\263\54"+
    "\7\1\60\2\0\10\7\1\140\6\7\5\0\1\7\1\214\2\4\2\0\2\4\1\266\2\0\1\267\4\0\1"+
    "\22\20\7\1\20\2\0\1\4\1\151\1\6\2\7\1\270\1\6\2\7\1\11\1\271\12\7\1\15\3\140"+
    "\1\272\4\0\1\7\1\132\2\7\1\15\2\7\1\273\1\7\1\60\1\7\1\60\4\0\17\7\1\11\10"+
    "\0\6\4\1\166\20\0\1\274\20\0\3\7\1\20\6\7\1\114\1\0\1\230\3\0\4\7\2\0\2\7"+
    "\1\47\1\275\4\7\1\51\1\36\3\7\1\60\4\7\1\214\1\7\1\276\5\0\23\7\1\60\1\4\1"+
    "\151\4\7\1\214\4\7\1\214\5\7\1\0\6\7\1\214\23\0\46\7\1\15\1\0\2\7\1\60\1\0"+
    "\1\7\23\0\1\60\1\72\4\7\1\27\1\277\2\7\1\60\1\0\2\7\1\15\1\0\3\7\1\15\10\0"+
    "\2\7\1\300\1\0\2\7\1\60\1\0\3\7\1\17\10\0\7\7\1\271\10\0\1\301\1\61\1\132"+
    "\1\6\2\7\1\214\1\104\4\0\3\7\1\20\3\7\1\20\4\0\1\7\1\6\2\7\1\302\3\0\6\7\1"+
    "\60\1\0\2\7\1\60\1\0\2\7\1\11\1\0\2\7\1\17\15\0\11\7\1\114\6\0\6\7\1\11\1"+
    "\0\6\7\1\11\41\0\1\217\6\7\1\4\1\150\3\0\1\110\1\4\1\0\1\76\1\217\5\7\1\4"+
    "\1\36\2\0\3\7\1\114\1\4\1\151\1\217\3\7\1\147\1\4\1\130\1\4\2\0\4\7\1\303"+
    "\1\0\1\217\5\7\1\37\1\4\1\304\1\305\1\4\1\306\4\0\2\7\1\26\2\7\1\205\1\4\1"+
    "\167\10\0\1\15\1\234\1\7\1\27\1\7\1\114\5\7\1\147\1\4\1\36\1\4\1\151\1\126"+
    "\1\70\1\71\2\7\1\72\1\112\1\74\1\43\1\105\1\125\1\236\1\66\2\166\21\0\6\7"+
    "\1\165\1\4\1\170\1\11\1\4\1\151\4\0\6\7\2\4\1\307\1\0\1\4\1\151\24\0\5\7\1"+
    "\147\1\161\1\4\1\230\2\0\1\254\4\0\6\7\2\4\1\310\1\0\1\4\1\151\4\0\5\7\1\37"+
    "\1\4\1\0\1\4\1\151\6\0\3\7\1\311\1\4\1\213\1\4\1\151\54\0\10\7\1\4\1\151\1"+
    "\0\1\137\70\0\7\7\1\114\40\0\1\7\1\72\3\7\1\147\1\150\1\4\1\114\1\0\1\4\1"+
    "\151\2\0\1\140\3\7\1\312\2\4\1\33\1\150\51\0\63\7\1\17\14\0\15\4\1\150\2\0"+
    "\30\7\1\214\27\0\5\7\1\15\72\0\10\7\1\15\67\0\7\7\1\114\3\7\1\15\1\4\1\151"+
    "\14\0\3\7\1\60\1\166\1\0\6\7\1\150\1\0\1\214\1\0\1\4\1\151\1\263\2\7\1\236"+
    "\2\7\56\0\10\7\1\20\1\0\1\65\4\4\1\150\1\0\1\76\1\217\1\7\10\0\1\114\3\0\75"+
    "\7\1\20\2\0\36\7\1\11\41\0\1\17\77\0\15\7\1\11\1\7\1\20\1\7\1\114\1\7\1\313"+
    "\130\0\1\267\1\314\1\36\1\216\1\315\1\213\3\0\1\316\22\0\1\305\67\0\12\7\1"+
    "\22\10\7\1\22\1\317\1\320\1\7\1\321\1\132\7\7\1\27\1\322\2\22\3\7\1\323\1"+
    "\160\1\140\1\72\51\7\1\60\3\7\1\72\2\7\1\177\3\7\1\177\2\7\1\22\3\7\1\22\2"+
    "\7\1\15\3\7\1\15\3\7\1\72\3\7\1\72\2\7\1\177\1\324\14\4\1\150\1\216\5\4\1"+
    "\166\1\274\1\0\1\231\2\0\1\216\1\33\1\4\52\0\1\150\2\4\1\325\1\326\1\36\72"+
    "\0\30\7\1\20\1\0\1\150\5\0\10\7\1\205\1\36\1\4\1\151\24\0\1\132\3\7\1\152"+
    "\1\6\1\177\1\327\1\232\1\330\1\152\1\224\1\152\2\177\1\107\1\7\1\26\1\7\1"+
    "\214\1\331\1\26\1\7\1\214\116\0\3\4\1\151\3\4\1\151\3\4\1\151\16\0\32\7\1"+
    "\15\5\0\106\7\1\20\1\0\33\7\1\60\120\7\1\17\53\0\3\7\1\60\134\0\36\4\2\0");

  /* The ZZ_CMAP_A table has 1744 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\2\0\1\2\1\0\1\10\4\0\1\11\4\0\1\4\3\0\12\7\1\5\6\0\22\6\1\0"+
    "\1\3\2\0\1\7\3\6\12\0\1\1\4\0\1\6\12\0\1\6\2\0\7\6\1\0\2\6\4\0\4\6\6\0\5\6"+
    "\7\0\1\6\1\0\1\6\1\0\5\6\1\0\2\6\2\0\4\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1"+
    "\0\4\6\1\0\13\6\1\0\3\6\1\0\7\7\6\6\1\0\1\6\7\0\15\7\1\0\1\7\1\0\2\7\1\0\2"+
    "\7\1\0\4\7\5\0\3\6\7\7\4\0\2\6\1\7\13\6\1\0\1\6\7\7\2\0\6\7\2\6\2\7\1\0\4"+
    "\7\2\6\2\7\3\6\2\0\2\6\1\7\6\6\3\7\2\0\11\6\3\7\1\6\6\0\4\7\2\6\2\0\2\7\1"+
    "\6\11\7\1\6\3\7\1\6\5\7\2\0\1\6\3\7\4\0\6\6\6\0\6\7\1\0\11\7\6\6\3\7\1\6\2"+
    "\7\1\6\7\7\2\6\2\7\2\0\2\7\1\6\3\7\1\0\10\6\2\0\2\6\2\0\6\6\1\0\7\6\1\0\1"+
    "\6\3\0\4\6\2\0\1\7\1\6\3\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0\1\6\1\0\3\7\1"+
    "\0\6\6\4\0\2\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0"+
    "\1\7\7\0\4\6\1\0\1\6\7\0\4\7\3\6\1\7\2\0\1\6\1\0\2\6\1\0\3\6\2\7\1\0\3\7\2"+
    "\0\1\6\11\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2"+
    "\6\3\0\2\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0\5\7\1\0\5\6\3\0\1\6\7\7\1\0"+
    "\2\7\5\0\2\7\1\0\4\6\1\0\3\6\1\0\2\6\5\0\3\6\2\0\1\6\3\7\1\0\4\7\1\6\5\0\3"+
    "\6\1\7\7\0\1\6\2\0\6\6\2\0\2\7\1\0\7\6\1\0\1\6\4\0\1\7\4\0\6\7\1\0\1\7\3\0"+
    "\2\7\4\0\1\6\1\7\2\6\4\7\7\6\10\7\1\0\2\7\7\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6"+
    "\2\0\1\6\6\0\4\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\3\6\2\7\1\0\2\7\1\6\2"+
    "\0\5\6\1\0\1\6\1\0\6\7\2\0\2\7\2\0\4\6\5\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\5\6"+
    "\10\7\11\0\1\7\1\0\7\7\1\6\2\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7\5\6\14\7\1"+
    "\6\1\7\3\6\1\0\7\6\2\0\3\7\3\6\3\0\2\7\2\6\3\7\3\0\2\6\2\7\4\0\1\6\1\0\2\7"+
    "\4\0\4\6\10\7\3\0\1\6\4\0\1\6\1\7\5\0\3\7\2\0\5\6\2\7\2\6\1\7\1\6\5\0\4\7"+
    "\4\0\4\6\4\0\5\7\3\6\3\0\10\7\5\6\2\7\3\0\3\6\3\7\1\0\5\7\4\6\1\7\4\6\3\7"+
    "\2\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\2\0\3\6\1\0\6\6\2\0\2\6\2\1\6\0\1\7\13"+
    "\0\1\7\5\0\1\6\4\0\1\6\1\0\5\6\2\0\1\6\1\0\4\6\1\0\3\6\2\0\4\6\5\0\5\6\4\0"+
    "\1\6\1\0\3\7\2\6\3\7\3\0\4\6\3\7\2\6\11\0\2\6\4\7\2\6\4\0\2\7\2\0\3\6\6\7"+
    "\1\0\3\6\1\7\3\6\1\7\4\6\1\7\4\6\3\0\1\6\1\0\1\6\2\0\5\6\1\7\2\6\2\7\5\6\1"+
    "\0\4\6\2\7\4\0\1\6\3\7\2\6\1\7\5\6\2\7\3\0\3\6\4\0\3\6\2\7\2\0\6\6\1\0\3\7"+
    "\1\0\2\7\5\0\5\6\5\0\1\6\1\7\3\6\1\0\2\6\1\0\2\6\3\0\2\7\10\0\3\7\3\6\4\0"+
    "\1\7\6\0\2\6\2\0\3\6\3\0\3\6\1\0\2\6\1\0\1\6\5\0\1\7\2\0\2\6\1\7\6\0\5\7\2"+
    "\0\1\6\3\0\1\6\2\0\4\6\1\0\2\6\2\0\1\6\3\7\1\0\2\7\1\0\5\6\2\7\1\0\3\6\1\7"+
    "\2\0\1\6\1\0\1\7\4\6\5\0\3\7\3\0\2\7\1\6\1\0\1\6\3\0\4\7\2\6\1\0\1\6\1\7\3"+
    "\0\1\6\3\0\2\6\3\0\3\7\2\0\6\7\2\6\3\0\2\7\1\0\2\7\3\0\6\7\2\0\3\7\2\0\4\7"+
    "\4\0\1\6\2\0\2\6\2\0\4\6\1\0\4\6\1\0\1\6\1\0\6\6\2\0\5\6\1\0\4\6\1\0\4\6\2"+
    "\0\3\7\2\0\7\7\1\0\2\7\1\0\2\7\1\0\1\6\1\0\1\6\5\0\1\6\1\0\1\6\1\0\3\6\1\0"+
    "\3\6\1\0\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\2\0\1\7\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[15];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\12\0\24\0\36\0\24\0\24\0\50\0\62"+
    "\0\74\0\106\0\62\0\120\0\24\0\74\0\132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[15];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\3\2\4\1\3\1\5\1\6\1\12\1\3"+
    "\1\10\1\11\13\0\2\4\15\0\2\7\2\0\3\13"+
    "\1\14\4\13\1\15\1\13\3\16\1\17\5\16\1\15"+
    "\6\0\2\12\2\0\1\13\1\0\10\13\1\16\1\0"+
    "\10\16";

  private static int [] zzUnpackTrans() {
    int [] result = new int[100];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\2\11\4\1\2\0\1\11\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[15];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OnjLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 8: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 9: break;
          case 3: 
            { yybegin(WAITING_VALUE); return OnjTypes.SEPARATOR;
            } 
            // fall through
          case 10: break;
          case 4: 
            { yybegin(WAITING_VALUE); return OnjTypes.ASSIGN;
            } 
            // fall through
          case 11: break;
          case 5: 
            { yybegin(YYINITIAL); return OnjTypes.NAME_CHARACTER;
            } 
            // fall through
          case 12: break;
          case 6: 
            { yybegin(WAITING_VALUE); return OnjTypes.NAME_CHARACTER;
            } 
            // fall through
          case 13: break;
          case 7: 
            { yybegin(WAITING_VALUE); return OnjTypes.STRING_VALUE;
            } 
            // fall through
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
